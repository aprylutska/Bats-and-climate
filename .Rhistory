group_by(season, place, year) %>%
summarise(mean(Tmin)) %>%
rename(Tmin = 4) %>%
as_tibble() -> Tmin_var
# Dissect only spring minimal temperatures
Tmin_var %>%
filter(season == "spring") %>%
rename(Tmin_spr = Tmin) %>%
select(-season) -> Tmin_spring
# Dissect only spring minimal temperatures
Tmin_var %>%
filter(season == "summer") %>%
rename(Tmin_summ = Tmin) %>%
select(-season) -> Tmin_summer
# Number of days with mean temperature less or equal 10 Celsius degree
daily_spring_summer %>%
filter(season == "spring") %>%
filter(MeanTemp <= 10) %>%
count(season, place, year) %>%
as_tibble() %>%
rename(Less10_var = n) %>%
select(-season) -> Less10_var
# GDU at the end of a spring period
daily_spring_summer %>%
filter(month(date) == 5 & day(date) == 24) %>%
select(place, year, GDU) %>%
rename(GDU_spr = GDU) -> GDU_spring
# GDU at the end of a summer period
daily_spring_summer %>%
filter(month(date) == 6 & day(date) == 24) %>%
select(place, year, GDU) %>%
rename(GDU_summ = GDU) -> GDU_summer
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer, by = join_by(place, year)) %>%
left_join(Tmin_spring, by = join_by(place, year)) %>%
left_join(Tmin_summer, by = join_by(place, year)) %>%
left_join(Less10_var, by = join_by(place, year)) %>%
left_join(GDU_spring, by = join_by(place, year)) %>%
left_join(GDU_summer, by = join_by(place, year)) %>%
left_join(SprOn, by = join_by(place, year)) %>%
mutate(across(c(GDU_spr,
GDU_summ,
spring_onset), as.numeric)) %>%
rename(Place = place,
Year = year) %>%
mutate(Year = as.factor(Year)) -> covariates
# Drop unused variables
rm(Prcp_spring, Prcp_var, Prcp_summer, Tmin_spring, Tmin_summer, Tmin_var,
GDU_summer, GDU_spring, Less10_var, daily_spring_summer)
# Merge data
df_clim <- df %>%
left_join(covariates, by = join_by(Place, Year))
# Export climate data for further sessions
save(df_clim, file = "bats_wClimate_2008-2019.Rdata")
# Load previously generated data if you have started a new session
load(file = "bats_wClimate_2008-2019.Rdata")
colnames(df_clim[12:ncol(df_clim)])
colnames(df_clim[13:ncol(df_clim)])
# Set the formula
formula_Ra_all_covs <- formula(Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset)
# Set the formula
formula_Ra_all_covs <- formula(Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset)
mod_Ra_all <- lm(formula = formula, data = df_clim)
# Set the formula
formula_Ra_all_covs <- as.formula(Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset)
# Set the formula
formula_Ra_all_covs <- as.formula(Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset)
```{r}
mod_Ra_all <- lm(formula = formula, data = df_clim)
print(formula_Ra_all_covs)
mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
# Set the formula
formula_Ra_all_covs <- "Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
print(formula_Ra_all_covs)
mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
library(car)
install.packages("car")
library(car)
library(car)
# Calculating VIF
vif_values <- vif(model)
# Calculating VIF
vif_values <- vif(mod_Ra_all)
mod_Ra_all
summary(mod_Ra_all)
View(df_clim)
# mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
mod_Ra_all <- lm(Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset,
data = df_clim)
summary(mod_Ra_all)
mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
summary(mod_Ra_all)
# Set the formula
formula_Ra_all_covs <- "Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
formula_BCI_all_covs <- "BCI ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
summary(mod_Ra_all)
mod_BCI_all <- lm(formula = as.formula(formula_BCI_all_covs), data = df_clim)
summary(mod_BCI_all)
library(car)
# Calculating VIF
vif_values <- vif(mod_Ra_all)
mod_SprOn <- lm(Ra ~ spring_onset, data = df_clim)
summary(mod_SprOn)
mod_SprOn <- lm(Ra ~ GDU_spr + spring_onset, data = df_clim)
summary(mod_SprOn)
mod_SprOn <- lm(BCI ~ GDU_spr + spring_onset, data = df_clim)
summary(mod_SprOn)
install.packages("corrplot")
# Corrplots
library(corrplot)
M = cor(df_clim[, 13:ncol(df_clim)])
M
corrplot(M) # by default, method = 'circle'
corrplot(M, method = 'number') # colorful number
corrplot(M, method = 'color', order = 'alphabet')
corrplot(M, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
corrplot.mixed(M, lower = 'shade', upper = 'pie', order = 'hclust')
# Corrplots
library(corrplot)
M = cor(df_clim[, 13:ncol(df_clim)])
M
# corrplot(M) # by default, method = 'circle'
#
# corrplot(M, method = 'number') # colorful number
#
# corrplot(M, method = 'color', order = 'alphabet')
corrplot(M, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
# corrplot.mixed(M, lower = 'shade', upper = 'pie', order = 'hclust')
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(df_clim[, 13:ncol(df_clim)], histogram = TRUE, method = "pearson")
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(df_clim[, 13:ncol(df_clim)])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# Corrplot
library(corrplot)
M = cor(df_clim[, 13:ncol(df_clim)])
corrplot(M, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
# Basic
pairs(df_clim[, 13:ncol(df_clim)])
# Corrplot
library(corrplot)
M = cor(df_clim[, 13:ncol(df_clim)])
# corrplot(M, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
# Custom function to calculate significance level (p-values) for correlation matrix
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(df_clim[, 13:ncol(df_clim)])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
library(PerformanceAnalytics)
chart.Correlation(df_clim[, 13:ncol(df_clim)], histogram = TRUE, method = "pearson")
library(PerformanceAnalytics)
chart.Correlation(df_clim[, 13:ncol(df_clim)], histogram = TRUE, method = "pearson")
library(car)
# Calculating VIF
vif_values <- vif(mod_Ra_all)
library(usdm)
v <- vifstep(df_clim[, 13:ncol(df_clim), th = 10)
v <- vifstep(df_clim[, 13:ncol(df_clim)], th = 10)
v
library(usdm)
vif(df_clim[, 13:ncol(df_clim)]) # calculates vif for the variables in r
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th=0.9) # identify collinear variables that should be excluded
v1
v2 <- vifstep(df_clim[, 13:ncol(df_clim)], th = 10)
v2
v1
vif(df_clim[, 13:ncol(df_clim)]) # calculates vif for the variables in r
v1
v2
library(usdm)
vif(df_clim[, 13:ncol(df_clim)]) # calculates vif for the variables in r
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th=0.9) # identify collinear variables that should be excluded
v1
v2 <- vifstep(df_clim[, 13:ncol(df_clim)], th = 10)
v2
vif(df_clim[, 13:ncol(df_clim)]) # calculates vif for the variables in r
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th = 0.7) # th - correlation threshold
v1
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th = 0.7) # th - correlation threshold
library(usdm)
# calculates vif for the variables in r
vif(df_clim[, 13:ncol(df_clim)])
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th = 0.7) # th - correlation threshold
v1
# Identify less correlated set of variables
v2 <- vifstep(df_clim[, 13:ncol(df_clim)], th = 10)
v2
# Load previously generated data if you have started a new session
load(file = "bats_wClimate_2008-2019.Rdata")
# Corrplot
library(corrplot)
M = cor(df_clim[, 13:ncol(df_clim)])
# corrplot(M, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
# Custom function to calculate significance level (p-values) for correlation matrix
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(df_clim[, 13:ncol(df_clim)])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# Custom function to calculate significance level (p-values) for correlation matrix
source("./functions/sign_level.R")
# Custom function to calculate significance level (p-values) for correlation matrix
source("./functions/sign_level.R")
# matrix of the p-value of the correlation
p.mat <- sign_level(df_clim[, 13:ncol(df_clim)])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
library(PerformanceAnalytics)
chart.Correlation(df_clim[, 13:ncol(df_clim)], histogram = TRUE, method = "pearson")
library(car)
# Calculating VIF
vif_values <- vif(mod_Ra_all)
library(usdm)
# calculates vif for the variables in r
vif(df_clim[, 13:ncol(df_clim)])
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th = 0.7) # th - correlation threshold
v1
# Identify less correlated set of variables
v2 <- vifstep(df_clim[, 13:ncol(df_clim)], th = 10)
v2
# Set the formula
formula_Ra_all_covs <- "Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
formula_BCI_all_covs <- "BCI ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
summary(mod_Ra_all)
mod_BCI_all <- lm(formula = as.formula(formula_BCI_all_covs), data = df_clim)
summary(mod_BCI_all)
mod_SprOn <- lm(BCI ~ GDU_spr + spring_onset, data = df_clim)
summary(mod_SprOn)
mod_SprOn <- lm(BCI ~ spring_onset, data = df_clim)
summary(mod_SprOn)
performance::check_model(mod_SprOn)
performance::check_model(mod_SprOn)
performance::check_model(mod_SprOn)
performance::check_model(mod_SprOn)
library(ggplot2)
theme_set(theme_classic(base_size = 6))
performance::check_model(mod_SprOn)
check_autocorr
performance::check_autocorrelation(mod_SprOn)
# Explore relationship between weather conditions and bat growth
```{r, echo=FALSE, eval=FALSE}
# Load previously generated data if you have started a new session
load(file = "bats_wClimate_2008-2019.Rdata")
# Load previously generated data if you have started a new session
load(file = "bats_wClimate_2008-2019.Rdata")
## Check highly correlated exploratory variables
Pearson correlation among variables
```{r}
# Corrplot
library(corrplot)
M = cor(df_clim[, 13:ncol(df_clim)])
# Custom function to calculate significance level (p-values) for correlation matrix
source("./functions/sign_level.R")
# matrix of the p-value of the correlation
p.mat <- sign_level(df_clim[, 13:ncol(df_clim)])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
```{r, warning=FALSE}
library(PerformanceAnalytics)
chart.Correlation(df_clim[, 13:ncol(df_clim)], histogram = TRUE, method = "pearson")
chart.Correlation(df_clim[, 13:ncol(df_clim)], histogram = TRUE, method = "pearson")
Variance Inflation Factor
# calculates vif for the variables in r
vif(df_clim[, 13:ncol(df_clim)])
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th = 0.7) # th - correlation threshold
v1
library(usdm)
# calculates vif for the variables in r
vif(df_clim[, 13:ncol(df_clim)])
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, 13:ncol(df_clim)], th = 0.7) # th - correlation threshold
v1
# Identify less correlated set of variables
v2 <- vifstep(df_clim[, 13:ncol(df_clim)], th = 10)
v2
# Set the formula
formula_Ra_all_covs <- "Ra ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
formula_BCI_all_covs <- "BCI ~ Prcp_spr + Prcp_summ + Tmin_spr + Tmin_summ + Less10_var + GDU_spr + GDU_summ + spring_onset"
mod_Ra_all <- lm(formula = as.formula(formula_Ra_all_covs), data = df_clim)
summary(mod_Ra_all)
mod_BCI_all <- lm(formula = as.formula(formula_BCI_all_covs), data = df_clim)
summary(mod_BCI_all)
mod_SprOn <- lm(BCI ~ spring_onset, data = df_clim)
summary(mod_SprOn)
mod_spring_all <- lm(BCI ~ Prcp_spr + Tmin_spr + GDU_spr + Less10_var, data = df_clim)
summary(mod_spring_all)
mod_summer_all <- lm(BCI ~ Prcp_summ + Tmin_summ + GDU_summ , data = df_clim)
summary(mod_summer_all)
mod_summer_all <- lm(BCI ~ Prcp_summ + Tmin_summ + GDU_summ , data = df_clim)
summary(mod_summer_all)
mod_strongest <- lm(BCI ~ Prcp_spr + GDU_spr + Less10_var + Prcp_summ , data = df_clim)
summary(mod_sstrongest)
mod_strongest <- lm(BCI ~ Prcp_spr + GDU_spr + Less10_var + Prcp_summ , data = df_clim)
summary(mod_strongest)
library(car)
# Calculating VIF
vif_values <- vif(mod_strongest)
vif_values
df_clim[, c("GDU_spr", "GDU_summ")]
M <- cor(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")])
# matrix of the p-value of the correlation
p.mat <- sign_level(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# calculates vif for the variables in r
vif(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")])
# calculates vif for the variables in r
vif(as.matrix(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]))
library(usdm)
# calculates vif for the variables in r
vif(as.matrix(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]
)
)
as.matrix(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]
)
df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]
)
df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]
# calculates vif for the variables in r
usdm::vif(as.matrix(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]
)
)
# calculates vif for the variables in r
usdm::vif(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")]
)
# identify collinear variables that should be excluded
v1 <- vifcor(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")], th = 0.7) # th - correlation threshold
v1
# Identify less correlated set of variables
v2 <- vifstep(df_clim[, c("Prcp_spr",
"GDU_spr",
"Less10_var",
"Prcp_summ")], th = 10)
v2
mod_gdu_spr_prcp_summ <- lm(BCI ~ GDU_spr + Prcp_summ , data = df_clim)
summary(mod_gdu_spr_prcp_summ)
