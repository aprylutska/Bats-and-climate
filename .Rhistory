type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# Null model with no climate signal
baseline <- lm(W ~ 1, data = df)
# # Fit candidate model set
# WWin <- slidingwin(xvar = xvar,
#                     cdate = daily$date,
#                     bdate = df$date,
#                     baseline = baseline,
#                     cinterval = cinterval,
#                     range = range,
#                     type = type, refday = refday,
#                     stat = stat,
#                     func = func,
#                     spatial = list(df$place_id, daily$place_id))
#
# save(WWin, file = paste0(modeldir, "WWin_Prcp.Rdata"))
# rm(WWin)
# gc()
#
# # Fit randomized model set for evaluation purposes
# WRand <- randwin(repeats = repeats,
#                   xvar = xvar,
#                   cdate = cdate,
#                   bdate = bdate,
#                   baseline = baseline,
#                   cinterval = cinterval,
#                   range = range,
#                   type = type, refday = refday,
#                   stat = stat,
#                   func = func,
#                   spatial = list(df$place_id, daily$place_id))
#
# save(WRand, file = paste0(modeldir, "WRand_Prcp.Rdata"))
# rm(WRand)
# gc()
load(file = paste0(modeldir, "WWin_Prcp.Rdata"))
# Possible combinations of model parameters
WWin$combos
candidate_models <- list()
for (i in 1:(length(WWin)-1)) {
candidate_models[[i]] <- head(WWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "WRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(WRand)-1)) {
randomized_models[[i]] <- head(WRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(WWin)-1)) {
bestmod <- WWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "WRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(WRand)-1)) {
pvalues[[i]] <- pvalue(dataset = WWin[[i]]$Dataset,
datasetrand = WRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(WWin)-1)) {
WOutput <- WWin[[i]]$Dataset
WRand_data <- WRand[[i]]
WindowOpen <- WWin[[i]]$Dataset[1, 2]
WindowClose <- WWin[[i]]$Dataset[1, 3]
# Fit single best model
WSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_W_", WWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = WOutput,
datasetrand = WRand_data,
bestmodel = WSingle$BestModel,
bestmodeldata = WSingle$BestModelData)
dev.off()
}
# Null model with no climate signal
baseline <- lm(BMI ~ 1, data = df)
# # Fit candidate model set
# BMIWin <- slidingwin(xvar = xvar,
#                     cdate = daily$date,
#                     bdate = df$date,
#                     baseline = baseline,
#                     cinterval = cinterval,
#                     range = range,
#                     type = type, refday = refday,
#                     stat = stat,
#                     func = func,
#                     spatial = list(df$place_id, daily$place_id))
#
# save(BMIWin, file = paste0(modeldir, "BMIWin_Prcp.Rdata"))
# rm(BMIWin)
# gc()
#
# # Fit randomized model set for evaluation purposes
# BMIRand <- randwin(repeats = repeats,
#                   xvar = xvar,
#                   cdate = cdate,
#                   bdate = bdate,
#                   baseline = baseline,
#                   cinterval = cinterval,
#                   range = range,
#                   type = type, refday = refday,
#                   stat = stat,
#                   func = func,
#                   spatial = list(df$place_id, daily$place_id))
#
# save(BMIRand, file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
# rm(BMIRand)
# gc()
load(file = paste0(modeldir, "BMIWin_Prcp.Rdata"))
# Possible combinations of model parameters
BMIWin$combos
candidate_models <- list()
for (i in 1:(length(BMIWin)-1)) {
candidate_models[[i]] <- head(BMIWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(BMIRand)-1)) {
randomized_models[[i]] <- head(BMIRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(BMIWin)-1)) {
bestmod <- BMIWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(BMIRand)-1)) {
pvalues[[i]] <- pvalue(dataset = BMIWin[[i]]$Dataset,
datasetrand = BMIRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(BMIWin)-1)) {
BMIOutput <- BMIWin[[i]]$Dataset
BMIRand_data <- BMIRand[[i]]
WindowOpen <- BMIWin[[i]]$Dataset[1, 2]
WindowClose <- BMIWin[[i]]$Dataset[1, 3]
# Fit single best model
BMISingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_BMI_", BMIWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = BMIOutput,
datasetrand = BMIRand_data,
bestmodel = BMISingle$BestModel,
bestmodeldata = BMISingle$BestModelData)
dev.off()
}
# Set priors
# List of dependent variable candidates
xvar <- list(Prcp = daily$Prcp)
stat <- "sum"
# Null model with no climate signal
baseline <- lm(Ra ~ 1, data = df)
# Fit candidate model set
RaWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(RaWin, file = paste0(modeldir, "RaWin_Prcp.Rdata"))
rm(RaWin)
gc()
# Fit randomized model set for evaluation purposes
RaRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(RaRand, file = paste0(modeldir, "RaRand_Prcp.Rdata"))
rm(RaRand)
gc()
load(file = paste0(modeldir, "RaWin_Prcp.Rdata"))
# Possible combinations of model parameters
RaWin$combos
candidate_models <- list()
for (i in 1:(length(RaWin)-1)) {
candidate_models[[i]] <- head(RaWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "RaRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(RaWin)-1)) {
bestmod <- RaWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "RaRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# Null model with no climate signal
baseline <- lm(W ~ 1, data = df)
# Fit candidate model set
WWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(WWin, file = paste0(modeldir, "WWin_Prcp.Rdata"))
rm(WWin)
gc()
# Fit randomized model set for evaluation purposes
WRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(WRand, file = paste0(modeldir, "WRand_Prcp.Rdata"))
rm(WRand)
gc()
load(file = paste0(modeldir, "WWin_Prcp.Rdata"))
# Possible combinations of model parameters
WWin$combos
candidate_models <- list()
for (i in 1:(length(WWin)-1)) {
candidate_models[[i]] <- head(WWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "WRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(WRand)-1)) {
randomized_models[[i]] <- head(WRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(WWin)-1)) {
bestmod <- WWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "WRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(WRand)-1)) {
pvalues[[i]] <- pvalue(dataset = WWin[[i]]$Dataset,
datasetrand = WRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(WWin)-1)) {
WOutput <- WWin[[i]]$Dataset
WRand_data <- WRand[[i]]
WindowOpen <- WWin[[i]]$Dataset[1, 2]
WindowClose <- WWin[[i]]$Dataset[1, 3]
# Fit single best model
WSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_W_", WWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = WOutput,
datasetrand = WRand_data,
bestmodel = WSingle$BestModel,
bestmodeldata = WSingle$BestModelData)
dev.off()
}
# Null model with no climate signal
baseline <- lm(BMI ~ 1, data = df)
# Fit candidate model set
BMIWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(BMIWin, file = paste0(modeldir, "BMIWin_Prcp.Rdata"))
rm(BMIWin)
gc()
# Fit randomized model set for evaluation purposes
BMIRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(BMIRand, file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
rm(BMIRand)
gc()
load(file = paste0(modeldir, "BMIWin_Prcp.Rdata"))
# Possible combinations of model parameters
BMIWin$combos
candidate_models <- list()
for (i in 1:(length(BMIWin)-1)) {
candidate_models[[i]] <- head(BMIWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(BMIRand)-1)) {
randomized_models[[i]] <- head(BMIRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(BMIWin)-1)) {
bestmod <- BMIWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(BMIRand)-1)) {
pvalues[[i]] <- pvalue(dataset = BMIWin[[i]]$Dataset,
datasetrand = BMIRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(BMIWin)-1)) {
BMIOutput <- BMIWin[[i]]$Dataset
BMIRand_data <- BMIRand[[i]]
WindowOpen <- BMIWin[[i]]$Dataset[1, 2]
WindowClose <- BMIWin[[i]]$Dataset[1, 3]
# Fit single best model
BMISingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_BMI_", BMIWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = BMIOutput,
datasetrand = BMIRand_data,
bestmodel = BMISingle$BestModel,
bestmodeldata = BMISingle$BestModelData)
dev.off()
}
