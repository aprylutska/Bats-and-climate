monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Prcp, y = Ra)) +
geom_point(shape = 1) +
# geom_smooth(method = "lm") +
# geom_smooth() +
stat_smooth(method = glm) +
facet_wrap(vars(month), scales = "free") +
labs(title = "Forearm length vs. Cumulative monthly precipitation")
# W
monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Tmean, y = W)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free") +
labs(title = "Body weight vs. Mean monthly temperature")
monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Tmin, y = W)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free") +
labs(title = "Body weight vs. Minimal monthly temperature")
monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Prcp, y = W)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free") +
labs(title = "Body weight vs. Cumulative monthly precipitation")
# BMI
monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Tmean, y = BMI)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free") +
labs(title = "Body Mass Index vs. Mean monthly temperature")
monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Tmin, y = BMI)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free") +
labs(title = "Body Mass Index vs. Minimal monthly temperature")
monthly_clim %>%
filter(month %in% c(4:6)) %>%
ggplot(aes(x = Prcp, y = BMI)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free") +
labs(title = "Body Mass Index vs. Cumulative monthly precipitation")
monthly_clim %>%
filter(month %in% c(1:6)) %>%
ggplot(aes(x = Tmean, y = BMI)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(vars(month), scales = "free")
# Vignettes
# library(climwin)
#
# vignette("climwin", package = "climwin")
# vignette("advanced_climwin", package = "climwin")
# Load necessary libraries
library(climwin)
library(lme4)
# Set priors
cdate <- daily$date  # date var in climate data
bdate <- df$date     # date var in biological data
# Relative or absolute time response.
# If "absolute", reference day as day, month is needed
type <- "absolute"
refday <- c(01, 07)
# If "relative", time window calculated for each individual value
# type <- "relative"
# refday <- NULL
# Temporal resolution of climate data
# cinterval <- "day"
cinterval <- "week"
# Upper and lower limit for tested climate windows respectively
# Must correspond to the resolution chosen in ‘cinterval’
# if 'cinterval' set to "days"
# range <- c(250, 0)
# if 'cinterval' set to "week"
# range <- c(30, 0) # (~ 1 Dec)
# range <- c(23, 0) # ~ 15 Jan
range <- c(13, 0) # ~ 1 Apr
stat <- "mean"
func <- "lin"
# number of repeats for randomization
repeats <- 5 # for metric = "C"
# repeats <- 200 # for metric = "AIC"
# Metrics for assessing
metric = "C"
# metric = "AIC"
# Number of years in data
sample.size = nlevels(as.factor(as.vector(df$Year)))
# Set priors
# List of dependent variable candidates
xvar <- list(Tmean = daily$Tmean, Tmin = daily$Tmin)
# # Null model with no climate signal
# baseline <- lm(Ra ~ 1, data = df)
# Null model with interaction
# Firstly, it is necessary to create a variable called ‘climate’ in the biological dataset.
df$climate <- 1
# Set baseline model
baseline <- lm(Ra ~ climate*sex, data = df)
# Fit candidate model set
RaWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
)
View(daily)
# Fit candidate model set
RaWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory)
)
save(RaWin, file = paste0(modeldir, "RaWin.Rdata"))
rm(RaWin)
gc()
# Fit randomized model set for evaluation purposes
RaRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory)
)
save(RaRand, file = paste0(modeldir, "RaRand.Rdata"))
rm(RaRand)
gc()
load(file = paste0(modeldir, "RaWin.Rdata"))
# Possible combinations of model parameters
RaWin$combos
candidate_models <- list()
for (i in 1:(length(RaWin)-1)) {
candidate_models[[i]] <- head(RaWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "RaRand.Rdata"))
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(RaWin)-1)) {
bestmod <- RaWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "RaRand.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# Null model with no climate signal
baseline <- lm(Ra ~ 1, data = df)
# # Null model with interaction
# # Firstly, it is necessary to create a variable called ‘climate’ in the biological dataset.
# df$climate <- 1
# # Set baseline model
# baseline <- lm(Ra ~ climate*sex, data = df)
# Fit candidate model set
RaWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory)
)
save(RaWin, file = paste0(modeldir, "RaWin.Rdata"))
rm(RaWin)
gc()
# Fit randomized model set for evaluation purposes
RaRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory)
)
save(RaRand, file = paste0(modeldir, "RaRand.Rdata"))
rm(RaRand)
gc()
load(file = paste0(modeldir, "RaWin.Rdata"))
# Possible combinations of model parameters
RaWin$combos
candidate_models <- list()
for (i in 1:(length(RaWin)-1)) {
candidate_models[[i]] <- head(RaWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "RaRand.Rdata"))
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(RaWin)-1)) {
bestmod <- RaWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "RaRand.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# # Null model with no climate signal
# baseline <- lm(Ra ~ 1, data = df)
# Null model with interaction
# Firstly, it is necessary to create a variable called ‘climate’ in the biological dataset.
df$climate <- 1
# Set baseline model
baseline <- lm(Ra ~ climate*sex, data = df)
View(df)
# Fit candidate model set
RaWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory)
)
save(RaWin, file = paste0(modeldir, "RaWin.Rdata"))
rm(RaWin)
gc()
# Fit randomized model set for evaluation purposes
RaRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory)
)
save(RaRand, file = paste0(modeldir, "RaRand.Rdata"))
rm(RaRand)
gc()
load(file = paste0(modeldir, "RaWin.Rdata"))
# Possible combinations of model parameters
RaWin$combos
candidate_models <- list()
for (i in 1:(length(RaWin)-1)) {
candidate_models[[i]] <- head(RaWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "RaRand.Rdata"))
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(RaWin)-1)) {
bestmod <- RaWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "RaRand.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
RaOutput <- RaWin[[1]]$Dataset
RaRand_data <- RaRand[[1]]
WindowOpen <- RaWin[[1]]$Dataset[1, 2]
WindowClose <- RaWin[[1]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[1],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
# spatial = list(df$place_id, daily$place_id)
spatial = list(df$Territory, daily$Territory))
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
