source("./functions/sumslidwin.R")         # Summed precipitation
source("./functions/retrospective_clim.R") # Wrapper for two previous
# Calculate retrospective mean temperatures (Tmean) and cumulative precipitation (Prcp)
# for each bat capture event, for defined time lag.
# Time lag 10 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 10,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag10d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Time lag 15 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 15,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag15d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Time lag 20 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 20,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag20d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Time lag 30 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 30,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag30d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Remove temporary variables
rm(covariates, daily, df, tdf, check_my_var, meanslidwin, sumslidwin, retrospective_clim)
# Call custom function to produce a series of candidate models (list) and their
# names (vector), combined in a single list of two.
source("./functions/bulk.model.fit.R")
## Ra
# Time lag 10 days
df_Ra_tl10 <- df_retrospective_lag10d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag10d))     # columns with independent variables
]
models_wo_interaction_tl10 <- bulk.model.fit(data = df_Ra_tl10,
response_var = "Ra",
interaction = "+",
prefix = "tl10")
models_w_interaction_tl10 <- bulk.model.fit(data = df_Ra_tl10,
response_var = "Ra",
interaction = "*",
prefix = "tl10")
# Time lag 15 days
df_Ra_tl15 <- df_retrospective_lag15d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag15d))     # columns with independent variables
]
models_wo_interaction_tl15 <- bulk.model.fit(data = df_Ra_tl15,
response_var = "Ra",
interaction = "+",
prefix = "tl15")
models_w_interaction_tl15 <- bulk.model.fit(data = df_Ra_tl15,
response_var = "Ra",
interaction = "*",
prefix = "tl15")
# Time lag 20 days
df_Ra_tl20 <- df_retrospective_lag20d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag20d))     # columns with independent variables
]
models_wo_interaction_tl20 <- bulk.model.fit(data = df_Ra_tl20,
response_var = "Ra",
interaction = "+",
prefix = "tl20")
models_w_interaction_tl20 <- bulk.model.fit(data = df_Ra_tl20,
response_var = "Ra",
interaction = "*",
prefix = "tl20")
# Time lag 30 days
df_Ra_tl30 <- df_retrospective_lag30d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag15d))     # columns with independent variables
]
models_wo_interaction_tl30 <- bulk.model.fit(data = df_Ra_tl30,
response_var = "Ra",
interaction = "+",
prefix = "tl30")
models_w_interaction_tl30 <- bulk.model.fit(data = df_Ra_tl30,
response_var = "Ra",
interaction = "*",
prefix = "tl30")
# Combine models into a single list
models_list_Ra <- c(models_wo_interaction_tl10[[1]],
models_w_interaction_tl10[[1]],
models_wo_interaction_tl15[[1]],
models_w_interaction_tl15[[1]],
models_wo_interaction_tl20[[1]],
models_w_interaction_tl20[[1]],
models_wo_interaction_tl30[[1]],
models_w_interaction_tl30[[1]])
# Combine model names into a single vector
model.names_Ra <- c(models_wo_interaction_tl10[[2]],
models_w_interaction_tl10[[2]],
models_wo_interaction_tl15[[2]],
models_w_interaction_tl15[[2]],
models_wo_interaction_tl20[[2]],
models_w_interaction_tl20[[2]],
models_wo_interaction_tl30[[2]],
models_w_interaction_tl30[[2]])
## BMI
# Time lag 10 days
df_BMI_tl10 <- df_retrospective_lag10d[, c(11,    # column with the response var (BMI)
12:ncol(df_retrospective_lag10d))    # columns with independent variables
]
models_wo_interaction_tl10 <- bulk.model.fit(data = df_BMI_tl10,
response_var = "BMI",
interaction = "+",
prefix = "tl10")
models_w_interaction_tl10 <- bulk.model.fit(data = df_BMI_tl10,
response_var = "BMI",
interaction = "*",
prefix = "tl10")
# Time lag 15 days
df_BMI_tl15 <- df_retrospective_lag15d[, c(11,    # column with the response var (BMI)
12:ncol(df_retrospective_lag15d))    # columns with independent variables
]
models_wo_interaction_tl15 <- bulk.model.fit(data = df_BMI_tl15,
response_var = "BMI",
interaction = "+",
prefix = "tl15")
models_w_interaction_tl15 <- bulk.model.fit(data = df_BMI_tl15,
response_var = "BMI",
interaction = "*",
prefix = "tl15")
# Time lag 20 days
df_BMI_tl20 <- df_retrospective_lag20d[, c(11,    # column with the response var (BMI)
12:ncol(df_retrospective_lag20d))    # columns with independent variables
]
models_wo_interaction_tl20 <- bulk.model.fit(data = df_BMI_tl20,
response_var = "BMI",
interaction = "+",
prefix = "tl20")
models_w_interaction_tl20 <- bulk.model.fit(data = df_BMI_tl20,
response_var = "BMI",
interaction = "*",
prefix = "tl20")
# Time lag 30 days
df_BMI_tl30 <- df_retrospective_lag30d[, c(11,   # column with the response var (BMI)
12:ncol(df_retrospective_lag30d))   # columns with independent variables
]
models_wo_interaction_tl30 <- bulk.model.fit(data = df_BMI_tl30,
response_var = "BMI",
interaction = "+",
prefix = "tl30")
models_w_interaction_tl30 <- bulk.model.fit(data = df_BMI_tl30,
response_var = "BMI",
interaction = "*",
prefix = "tl30")
# Combine models into a single list
models_list_BMI <- c(models_wo_interaction_tl10[[1]],
models_w_interaction_tl10[[1]],
models_wo_interaction_tl15[[1]],
models_w_interaction_tl15[[1]],
models_wo_interaction_tl20[[1]],
models_w_interaction_tl20[[1]],
models_wo_interaction_tl30[[1]],
models_w_interaction_tl30[[1]])
# Combine model names into a single vector
model.names_BMI <- c(models_wo_interaction_tl10[[2]],
models_w_interaction_tl10[[2]],
models_wo_interaction_tl15[[2]],
models_w_interaction_tl15[[2]],
models_wo_interaction_tl20[[2]],
models_w_interaction_tl20[[2]],
models_wo_interaction_tl30[[2]],
models_w_interaction_tl30[[2]])
# Remove temporary objects
rm(df_Ra_tl10, df_Ra_tl15, df_Ra_tl20, df_Ra_tl30,
df_BMI_tl10, df_BMI_tl15, df_BMI_tl20, df_BMI_tl30,
models_wo_interaction_tl10, models_w_interaction_tl10,
models_wo_interaction_tl15, models_w_interaction_tl15,
models_wo_interaction_tl20, models_w_interaction_tl20,
models_wo_interaction_tl30, models_w_interaction_tl30,
models_list_Ra, model.names_Ra,
models_list_BMI, model.names_BMI)
# Free-up memory
gc()
library(AICcmodavg) # to compare models by AIC
model.ranking <- aictab(cand.set = models_list_Ra, modnames = model.names_Ra)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # reset R's brain
library(tidyverse) # for data manipulations
library(lubridate) # for transforming date variables
library(easyclimate) # for daily climate data extraction
library(sf) # for spatial operations
library(gridExtra) # for ggplot plates
# library(jtools)
# Set custom theme for ggplot2 plots
mytheme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Set custom theme as a default for all ggplot below
theme_set(mytheme)
# if LC_TIME=uk_UA.UTF-8, your months will be in Ukrainian.
# To fix that, you need to re-map locate into US (will be back after restart R session)
# Set locale to get English months names
# Sys.setlocale("LC_TIME", "en_US.UTF-8") # for Linux
# Sys.setlocale("LC_TIME", "English") # for Windows
# Custom function to check dependency of selected growth metric on day across years
source("./functions/check_my_var.R")
# Read data and prepare it for further analyses
df <- read.csv("./data/Inventory_all_years_2024-04-04_OP.csv") %>%
mutate(date = dmy(Data)) %>%
mutate(Year = year(date)) %>%
# day of the year (start from the 1st Jan of each year)
mutate(day = yday(date)) %>%
select(-Data) %>%
select(-ring) %>%
# Drop rows with NAs in W and Ra
filter(complete.cases(.)) %>%
# Drop empty strings (which are not NAs)
filter(Place != "") %>%
filter(Species == "Nyctalus noctula" &
age == "sad") %>%
select(-Species, -age) %>%
# Make a new variable with places' unique identifiers
unite("place_id", Territory:Place, remove = FALSE) %>%
mutate(across(c(place_id, Territory, Place, sex, Year),
as.factor))
# Loaded packages with their versions
sessionInfo() # to check your locale
df <- df %>%
# count bats per day
count(date) %>%
# choose days where more than 10 bats
filter(n > 10) %>%
# subset with days where more than 10 bats
inner_join(df, by = join_by(date)) %>%
select(-n)
ggplot(data = df, aes(Ra, W
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# geom_smooth(aes(fill = Year)) +
labs(x = "Forearm length, mm",
y = "Weight, g")
p1 <- ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Forearm length",
y = "Forearm length, mm")
p2 <- ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "Weight",
y = "Weight, g")
gridExtra::grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = df, aes(Year, Ra)) +
geom_violin() +
labs(title = "Forearm length",
y = "Ra, mm")
p2 <- ggplot(data = df, aes(Year, W)) +
geom_violin() +
labs(title = "Weight",
y = "W, g")
gridExtra::grid.arrange(p1, p2, nrow=1, ncol=2)
rm(p1, p2)
# t ~ Ra
p_Ra_day_4years <- ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "Ra ~ DOY",
x = "Day of the year",
y = "Forearm length, mm")
# t ~ W
p_W_day_4years <- ggplot(data = df, aes(x = day, y = W, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "W ~ DOY",
x = "Day of the year",
y = "Weight, g")
gridExtra::grid.arrange(p_Ra_day_4years, p_W_day_4years, nrow=1, ncol=2)
rm(p_Ra_day_4years, p_W_day_4years)
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
ggplot(df, aes(day)) +
geom_histogram() +
labs(x = "Day of the year",
y = "Number of bats") +
facet_wrap(vars(Year))
# Fit simple linear model
mod <- lm(log(W) ~ log(day), data = df)
# Get residuals
df$BMI <- residuals(mod)
# Drop unused variables
rm(mod)
check_my_var(df, "BMI", "day")
ggplot(data = df, aes(Year, BMI)) +
geom_violin() +
labs(y = "Body Mass Index")
ggplot(data = df, aes(day, BMI, colour = Year)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(x = "Day of the year",
y = "Body Mass Index")
# facet_wrap(vars(sex))
# Take a look at the timespan
summary(df$date)
load(file = "./data/daily_weather_2008-2019.Rdata")
daily <- daily %>%
mutate(date = as.Date(date))
df <- df %>%
rownames_to_column(var = "bat_id")
# Make aggregated data frame, where one row = one capture event (place_id + date)
tdf <- df %>%
count(place_id, date)
# Custom function to calculate means of variable (xvar) in retrospective sliding window
source("./functions/meanslidwin.R")        # Mean temperature
source("./functions/sumslidwin.R")         # Summed precipitation
source("./functions/retrospective_clim.R") # Wrapper for two previous
# Calculate retrospective mean temperatures (Tmean) and cumulative precipitation (Prcp)
# for each bat capture event, for defined time lag.
# Time lag 10 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 10,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag10d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Time lag 15 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 15,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag15d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Time lag 20 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 20,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag20d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Time lag 30 days
covariates <- retrospective_clim(events = tdf,
daily_clim = daily,
time_lag = 30,
startdayofyear = "03-01",
enddayofyear = "07-01")
df_retrospective_lag30d <- df %>%
left_join(covariates, by = c("place_id", "date"))
# Remove temporary variables
rm(covariates, daily, df, tdf, check_my_var, meanslidwin, sumslidwin, retrospective_clim)
# Call custom function to produce a series of candidate models (list) and their
# names (vector), combined in a single list of two.
source("./functions/bulk.model.fit.R")
## Ra
# Time lag 10 days
df_Ra_tl10 <- df_retrospective_lag10d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag10d))     # columns with independent variables
]
models_wo_interaction_tl10 <- bulk.model.fit(data = df_Ra_tl10,
response_var = "Ra",
interaction = "+",
prefix = "tl10")
models_w_interaction_tl10 <- bulk.model.fit(data = df_Ra_tl10,
response_var = "Ra",
interaction = "*",
prefix = "tl10")
# Time lag 15 days
df_Ra_tl15 <- df_retrospective_lag15d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag15d))     # columns with independent variables
]
models_wo_interaction_tl15 <- bulk.model.fit(data = df_Ra_tl15,
response_var = "Ra",
interaction = "+",
prefix = "tl15")
models_w_interaction_tl15 <- bulk.model.fit(data = df_Ra_tl15,
response_var = "Ra",
interaction = "*",
prefix = "tl15")
# Time lag 20 days
df_Ra_tl20 <- df_retrospective_lag20d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag20d))     # columns with independent variables
]
models_wo_interaction_tl20 <- bulk.model.fit(data = df_Ra_tl20,
response_var = "Ra",
interaction = "+",
prefix = "tl20")
models_w_interaction_tl20 <- bulk.model.fit(data = df_Ra_tl20,
response_var = "Ra",
interaction = "*",
prefix = "tl20")
# Time lag 30 days
df_Ra_tl30 <- df_retrospective_lag30d[, c(7,       # column with the response var (Ra)
12:ncol(df_retrospective_lag15d))     # columns with independent variables
]
models_wo_interaction_tl30 <- bulk.model.fit(data = df_Ra_tl30,
response_var = "Ra",
interaction = "+",
prefix = "tl30")
models_w_interaction_tl30 <- bulk.model.fit(data = df_Ra_tl30,
response_var = "Ra",
interaction = "*",
prefix = "tl30")
# Combine models into a single list
models_list_Ra <- c(models_wo_interaction_tl10[[1]],
models_w_interaction_tl10[[1]],
models_wo_interaction_tl15[[1]],
models_w_interaction_tl15[[1]],
models_wo_interaction_tl20[[1]],
models_w_interaction_tl20[[1]],
models_wo_interaction_tl30[[1]],
models_w_interaction_tl30[[1]])
# Combine model names into a single vector
model.names_Ra <- c(models_wo_interaction_tl10[[2]],
models_w_interaction_tl10[[2]],
models_wo_interaction_tl15[[2]],
models_w_interaction_tl15[[2]],
models_wo_interaction_tl20[[2]],
models_w_interaction_tl20[[2]],
models_wo_interaction_tl30[[2]],
models_w_interaction_tl30[[2]])
## BMI
# Time lag 10 days
df_BMI_tl10 <- df_retrospective_lag10d[, c(11,    # column with the response var (BMI)
12:ncol(df_retrospective_lag10d))    # columns with independent variables
]
models_wo_interaction_tl10 <- bulk.model.fit(data = df_BMI_tl10,
response_var = "BMI",
interaction = "+",
prefix = "tl10")
models_w_interaction_tl10 <- bulk.model.fit(data = df_BMI_tl10,
response_var = "BMI",
interaction = "*",
prefix = "tl10")
# Time lag 15 days
df_BMI_tl15 <- df_retrospective_lag15d[, c(11,    # column with the response var (BMI)
12:ncol(df_retrospective_lag15d))    # columns with independent variables
]
models_wo_interaction_tl15 <- bulk.model.fit(data = df_BMI_tl15,
response_var = "BMI",
interaction = "+",
prefix = "tl15")
models_w_interaction_tl15 <- bulk.model.fit(data = df_BMI_tl15,
response_var = "BMI",
interaction = "*",
prefix = "tl15")
# Time lag 20 days
df_BMI_tl20 <- df_retrospective_lag20d[, c(11,    # column with the response var (BMI)
12:ncol(df_retrospective_lag20d))    # columns with independent variables
]
models_wo_interaction_tl20 <- bulk.model.fit(data = df_BMI_tl20,
response_var = "BMI",
interaction = "+",
prefix = "tl20")
models_w_interaction_tl20 <- bulk.model.fit(data = df_BMI_tl20,
response_var = "BMI",
interaction = "*",
prefix = "tl20")
# Time lag 30 days
df_BMI_tl30 <- df_retrospective_lag30d[, c(11,   # column with the response var (BMI)
12:ncol(df_retrospective_lag30d))   # columns with independent variables
]
models_wo_interaction_tl30 <- bulk.model.fit(data = df_BMI_tl30,
response_var = "BMI",
interaction = "+",
prefix = "tl30")
models_w_interaction_tl30 <- bulk.model.fit(data = df_BMI_tl30,
response_var = "BMI",
interaction = "*",
prefix = "tl30")
# Combine models into a single list
models_list_BMI <- c(models_wo_interaction_tl10[[1]],
models_w_interaction_tl10[[1]],
models_wo_interaction_tl15[[1]],
models_w_interaction_tl15[[1]],
models_wo_interaction_tl20[[1]],
models_w_interaction_tl20[[1]],
models_wo_interaction_tl30[[1]],
models_w_interaction_tl30[[1]])
# Combine model names into a single vector
model.names_BMI <- c(models_wo_interaction_tl10[[2]],
models_w_interaction_tl10[[2]],
models_wo_interaction_tl15[[2]],
models_w_interaction_tl15[[2]],
models_wo_interaction_tl20[[2]],
models_w_interaction_tl20[[2]],
models_wo_interaction_tl30[[2]],
models_w_interaction_tl30[[2]])
# Remove temporary objects
rm(df_Ra_tl10, df_Ra_tl15, df_Ra_tl20, df_Ra_tl30,
df_BMI_tl10, df_BMI_tl15, df_BMI_tl20, df_BMI_tl30,
models_wo_interaction_tl10, models_w_interaction_tl10,
models_wo_interaction_tl15, models_w_interaction_tl15,
models_wo_interaction_tl20, models_w_interaction_tl20,
models_wo_interaction_tl30, models_w_interaction_tl30)
# Free-up memory
gc()
library(AICcmodavg) # to compare models by AIC
model.ranking <- aictab(cand.set = models_list_Ra, modnames = model.names_Ra)
# View model ranged from the best (least deltaAIC) to the worst, only 20 best models
head(model.ranking, n = 20L)
library(AICcmodavg) # to compare models by AIC
model.ranking.Ra <- aictab(cand.set = models_list_Ra, modnames = model.names_Ra)
# View model ranged from the best (least deltaAIC) to the worst, only 20 best models
head(model.ranking.Ra, n = 20L)
model.ranking.BMI <- aictab(cand.set = models_list_BMI, modnames = model.names_BMI)
# View model ranged from the best (least deltaAIC) to the worst, only 20 best models
head(model.ranking.BMI, n = 20L)
