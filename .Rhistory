check_my_var(df, Ra, day)
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = subset(data = data, Year == years[i]))
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
# Drop unused variables
rm(mod, years, yearly_stat, coef, i, p_val)
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = subset(data = data, data$Year == years[i]))
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
# Drop unused variables
rm(mod, years, yearly_stat, coef, i, p_val)
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
# Drop unused variables
rm(mod, years, yearly_stat, coef, i, p_val)
}
check_my_var(df, "Ra", "day")
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(c(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(p)
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(p)
return(yearly_stat)
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = df, aes(x = day, y = Ra)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = data, aes(x = substitute(independent_var), y = substitute(dependent_var))) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = data, aes(x = paste(independent_var), y = paste(dependent_var))) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
check_my_var(df, "W_Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
" ",
ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
"*",
"***"))
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p-value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
yearly_stat$sign_level <- if(yearly_stat$p-value > 0.05) {" "} else {"*"}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
yearly_stat$sign_level <- if(yearly_stat$p_value > 0.05) {" "} else {"*"}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
yearly_stat$sign_level[k] <- if(yearly_stat$p_value[k] > 0.05) {" "} else {"*"}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
for (k in 1:nrow(yearly_stat)) {
yearly_stat$sign_level[k] <- if(yearly_stat$p_value[k] > 0.05) {" "} else {"*"}
}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
for (k in 1:nrow(yearly_stat)) {
yearly_stat$sign_level[k] <- if(yearly_stat$p_value[k] > 0.05) {" "} else {"*"}
}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
theme_classic()
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
check_my_var(df, "W_Ra", "day")
check_my_var(df, "Ra_SqW", "day")
check_my_var(df, "Ra_SqW", "day")
check_my_var(df, "Ra_sqW", "day")
rm(list = ls()) # reset R's brain
library(lubridate)
library(ggplot2)
library(tidyverse) # for data manipulations
library(easyclimate) # for daily climate data extraction
library(sf) # for spatial operations
# library(patchwork)
# library(jtools)
# Loaded packages with their versions
sessionInfo() # to check your locale
# if LC_TIME=uk_UA.UTF-8, your months will be in Ukrainian.
# To fix that, you need to re-map locate into US (will be back after restart R session)
# Set locale to get English months names
# Sys.setlocale("LC_TIME", "en_US.UTF-8") # for Linux
# Sys.setlocale("LC_TIME", "English") # for Windows
df <- read.csv("Homolsha_all_years.csv") # read data from *.csv file
# Set variables classes
df$date <- as.Date(df$Data, "%d.%m.%Y") # convert date to R Data format
df$Place <- as.factor(df$Place)
df$Species <- as.factor(df$Species)
df$sex <- as.factor(df$sex)
df$age <- as.factor(df$age)
df$Year <- year(df$date) #виокремлення року
df$Year <-as.factor (df$Year)
#створення нової колонки з даними про день від початку року
df$day <- yday(df$date)
df$Ra <- sub(",", ".", df$Ra) #заміна ком на крапки в промірах передпліччя
df$W <- sub(",", ".", df$W)
df$Ra <-as.numeric (df$Ra) #присвоєння промірам нумеричного типу даних
df$W <-as.numeric (df$W)
# Delete unused variables
df$Data <- NULL
df$reproductive.status <- NULL
# Take a look at the data
summary(df)
table (df$Species,df$age)
