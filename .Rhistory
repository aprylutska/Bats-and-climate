select(place, year, GDU) %>%
rename(GDU_summ = GDU) -> GDU_summer
left_join(GDU_spring, GDU_summer
# Merge weather covariates
Prcp_spring %>%
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer) %>%
left_join(Tmin_spring) %>%
left_join(Tmin_summer) %>%
left_join(Less10_var) %>%
left_join(GDU_spring) %>%
left_join(GDU_summer)
View(Less10_var)
# Number of days with mean temperature less or equal 10 Celsius degree
daily_spring_summer %>%
filter(season == "spring") %>%
filter(MeanTemp <= 10) %>%
count(season, place, year) %>%
as_tibble() %>%
select(-season) -> Less10_var
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer) %>%
left_join(Tmin_spring) %>%
left_join(Tmin_summer) %>%
left_join(Less10_var) %>%
left_join(GDU_spring) %>%
left_join(GDU_summer)
View(GDU_spring)
# Number of days with mean temperature less or equal 10 Celsius degree
daily_spring_summer %>%
filter(season == "spring") %>%
filter(MeanTemp <= 10) %>%
count(season, place, year) %>%
as_tibble() %>%
rename(Less10_var = n) %>%
select(-season) -> Less10_var
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer) %>%
left_join(Tmin_spring) %>%
left_join(Tmin_summer) %>%
left_join(Less10_var) %>%
left_join(GDU_spring) %>%
left_join(GDU_summer)
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer) %>%
left_join(Tmin_spring) %>%
left_join(Tmin_summer) %>%
left_join(Less10_var) %>%
left_join(GDU_spring) %>%
left_join(GDU_summer) -> covariates
rm(Prcp_spring, Prcp_var, Prcp_summer, Tmin_spring, Tmin_summer, Tmin_var, GDU_summer, GDU_spring)
rm(Prcp_spring, Prcp_var, Prcp_summer, Tmin_spring, Tmin_summer, Tmin_var,
GDU_summer, GDU_spring, Less10_var, daily_spring_summer)
# Merge data
df_clim <- df %>%
left_join(covariates)
# Merge data
df_clim <- df %>%
rename(year = Year) %>%
left_join(covariates)
View(df_clim)
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer) %>%
left_join(Tmin_spring) %>%
left_join(Tmin_summer) %>%
left_join(Less10_var) %>%
left_join(GDU_spring) %>%
left_join(GDU_summer) %>%
rename(Place = place,
Year = year) -> covariates
# Cumulative precipitation
daily_spring_summer %>%
group_by(season, place, year) %>%
summarise(sum(Prcp)) %>%
rename(Prcp = 4) %>%
as_tibble() -> Prcp_var
load(file = "daily_weather_2008-2019.Rdata")
daily <- daily %>%
# Calculate derived metrics for each day
mutate(DiurnialRange = Tmax - Tmin,
MeanTemp = (Tmin + Tmax) / 2,
# Get only positive mean temperatures (for Growing degree units calculation)
PositiveMeanTemp = ifelse(MeanTemp > 0, MeanTemp, 0)) %>%
# Adjust dates and add new variables for month and years
mutate(date = as.Date(date),
month = months(date),
year = format(date, format = "%Y")) %>%
# Filter only years of inventories
filter(year %in% c(2008, 2011, 2014, 2019))
# Must be calculated for each year separately.
# Data must contain one row per day and the variable with the positive daily mean temperature.
# If mean temperature is negative, put zero in this variable.
# Also the variable with the full date MUST be character AND named "date"
gdu <- function(daily_data_for_one_year,
var_with_PositiveMeanTemp) {
GDU <- list() # prepare empty list
# looping through the daily data within the year
for (i in 1:nrow(daily_data_for_one_year)) {
GDU[[i]] <- c(daily_data_for_one_year$date[i],
sum(daily_data_for_one_year[1:i, var_with_PositiveMeanTemp])
)
}
# reshape obtained list
GDU <- as.data.frame(GDU)
GDU <- as.data.frame(t(GDU))
colnames(GDU) <- c("date", "GDU")
# retrieve the result
return(GDU)
}
# List all required years
list_of_years <- c(2008, 2011, 2014, 2019)
# Create an empty list
gdu_by_years <- list()
for (k in 1:length(list_of_years)) {
# Calculate GDUs for each year
df_temp <- daily %>%
# loop doesn't seem to work with `date` format, convert to character
mutate(date = as.character(date)) %>%
filter(year == list_of_years[[k]]) %>%
select(place, date, PositiveMeanTemp) %>%
split(.$place)
# Create an empty list
df_gdu <- list()
# Loop through the list elements (data frames with all days for the particular year,
# split by place ID)
for (i in 1:length(df_temp)) {
df_gdu[[i]] <- gdu(df_temp[[i]], "PositiveMeanTemp")
df_gdu[[i]]$place <- df_temp[[i]]$place
}
# Transform list of data frames into a single data frame
gdu_by_years[[k]] <- bind_rows(df_gdu)
}
# Transform list of data frames into a single data frame
GDU <- bind_rows(gdu_by_years) %>%
mutate(date = as.Date(date))
# Add GDU as additional variable to the daily climate data for required years
daily <- daily %>%
left_join(GDU, by = c("date", "place"))
# Drop temporary variables not longer required
rm(df_temp, df_gdu, GDU, gdu_by_years, i, k)
daily %>%
mutate(day = lubridate::yday(date)) %>%
select(date, day) %>%
filter(month(date) == 3 & day(date) == 25) %>%
unique()
# Pre-natal (spring) periods only
daily %>%
filter(date >= "2008-03-25" & date < "2008-05-25") %>%
mutate(season = "spring") -> spring2008
daily %>%
filter(date >= "2011-03-25" & date < "2011-05-25") %>%
mutate(season = "spring") -> spring2011
daily %>%
filter(date >= "2014-03-25" & date < "2014-05-25") %>%
mutate(season = "spring") -> spring2014
daily %>%
filter(date >= "2019-03-25" & date < "2019-05-25") %>%
mutate(season = "spring") -> spring2019
# Post-natal (summer) periods only
daily %>%
filter(date >= "2008-05-25" & date < "2008-06-25") %>%
mutate(season = "summer") -> summer2008
daily %>%
filter(date >= "2011-05-25" & date < "2011-06-25") %>%
mutate(season = "summer") -> summer2011
daily %>%
filter(date >= "2014-05-25" & date < "2014-06-25") %>%
mutate(season = "summer") -> summer2014
daily %>%
filter(date >= "2019-05-25" & date < "2019-06-25") %>%
mutate(season = "summer") -> summer2019
daily_spring_summer <- bind_rows(spring2008, spring2011, spring2014, spring2019,
summer2008, summer2011, summer2014, summer2019)
# Remove unused temorary variables
rm(spring2008, spring2011, spring2014, spring2019,
summer2008, summer2011, summer2014, summer2019)
daily_spring_summer %>%
filter(season == "spring") %>%
select(date, year, Tmin) |>
ggplot(aes(Tmin)) +
geom_density(fill = "lightgreen",
alpha = 0.5) +
facet_wrap( ~ factor(year)) +
labs(title = "Spring",
x = "Minimal temperature") +
theme_bw()
ggsave("./figures/Tmin_2008-2019_density_Spring.png", width = 16, height = 12, units = "cm", dpi = 150)
# Cumulative precipitation
daily_spring_summer %>%
group_by(season, place, year) %>%
summarise(sum(Prcp)) %>%
rename(Prcp = 4) %>%
as_tibble() -> Prcp_var
# Split spring only precipitation
Prcp_var %>%
filter(season == "spring") %>%
rename(Prcp_spr = Prcp) %>%
select(-season) -> Prcp_spring
# Split summer only precipitation
Prcp_var %>%
filter(season == "summer") %>%
rename(Prcp_summ = Prcp) %>%
select(-season) -> Prcp_summer
# Average minimum daily temperature
daily_spring_summer %>%
group_by(season, place, year) %>%
summarise(mean(Tmin)) %>%
rename(Tmin = 4) %>%
as_tibble() -> Tmin_var
# Dissect only spring minimal temperatures
Tmin_var %>%
filter(season == "spring") %>%
rename(Tmin_spr = Tmin) %>%
select(-season) -> Tmin_spring
# Dissect only spring minimal temperatures
Tmin_var %>%
filter(season == "summer") %>%
rename(Tmin_summ = Tmin) %>%
select(-season) -> Tmin_summer
# Number of days with mean temperature less or equal 10 Celsius degree
daily_spring_summer %>%
filter(season == "spring") %>%
filter(MeanTemp <= 10) %>%
count(season, place, year) %>%
as_tibble() %>%
rename(Less10_var = n) %>%
select(-season) -> Less10_var
# GDU at the end of a spring period
daily_spring_summer %>%
filter(month(date) == 5 & day(date) == 24) %>%
select(place, year, GDU) %>%
rename(GDU_spr = GDU) -> GDU_spring
# GDU at the end of a summer period
daily_spring_summer %>%
filter(month(date) == 6 & day(date) == 24) %>%
select(place, year, GDU) %>%
rename(GDU_summ = GDU) -> GDU_summer
# Merge weather covariates
Prcp_spring %>%
left_join(Prcp_summer) %>%
left_join(Tmin_spring) %>%
left_join(Tmin_summer) %>%
left_join(Less10_var) %>%
left_join(GDU_spring) %>%
left_join(GDU_summer) %>%
rename(Place = place,
Year = year) -> covariates
# Drop unused variables
rm(Prcp_spring, Prcp_var, Prcp_summer, Tmin_spring, Tmin_summer, Tmin_var,
GDU_summer, GDU_spring, Less10_var, daily_spring_summer)
# Merge data
df_clim <- df %>%
left_join(covariates)
View(df_clim)
# Export climate data for further sessions
save(df_clim, file = "bats_wClimate_2008-2019.Rdata")
rm(list = ls()) # reset R's brain
library(lubridate)
library(ggplot2)
library(tidyverse) # for data manipulations
library(easyclimate) # for daily climate data extraction
library(sf) # for spatial operations
library(jtools)
# Loaded packages with their versions
sessionInfo() # to check your locale
# if LC_TIME=uk_UA.UTF-8, your months will be in Ukrainian.
# To fix that, you need to re-map locate into US (will be back after restart R session)
# Set locale to get English months names
# Sys.setlocale("LC_TIME", "en_US.UTF-8") # for Linux
# Sys.setlocale("LC_TIME", "English") # for Windows
df <- read.csv("Homolsha_all_years.csv") # read data from *.csv file
# Set variables classes
df$date <- as.Date(df$Data, "%d.%m.%Y") # convert date to R Data format
df$Place <- as.factor(df$Place)
df$Species <- as.factor(df$Species)
df$sex <- as.factor(df$sex)
df$age <- as.factor(df$age)
df$Year <- year(df$date) #виокремлення року
df$Year <-as.factor (df$Year)
#створення нової колонки з даними про день від початку року
df$day <- yday(df$date)
df$Ra <- sub(",", ".", df$Ra) #заміна ком на крапки в промірах передпліччя
df$W <- sub(",", ".", df$W)
df$Ra <-as.numeric (df$Ra) #присвоєння промірам нумеричного типу даних
df$W <-as.numeric (df$W)
# Delete unused variables
df$Data <- NULL
df$reproductive.status <- NULL
# Take a look at the data
summary(df)
table (df$Species,df$age)
# Subset only some species (e.g., N.noc. and M.daubentonii )
df <- subset(df,
Species %in% c('Nyctalus noctula',
'Myotis daubentonii') &
age == "sad"
)
summary (df)
ggplot(data = df, aes(Ra, W, colour = Species)) +
geom_point()
ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Species),
scales = "free")
# Subset only some species (e.g., N.noc.)
nnoc_df <- subset(df,
Species %in% c('Nyctalus noctula') &
age == "sad"
)
summary (nnoc_df)
library (lme4)
# `lme4` requires `Matrix` >= 1.6-4. See for more details https://community.rstudio.com/t/error-in-initializeptr-function-cholmod-factor-ldeta-not-provided-by-package-matrix/178694
library (lme4)
# `lme4` requires `Matrix` >= 1.6-4. See for more details https://community.rstudio.com/t/error-in-initializeptr-function-cholmod-factor-ldeta-not-provided-by-package-matrix/178694
mod0Ra <- lmer (Ra ~ 1 + (1|Year),
data=nnoc_df
# REML=F # https://tobiasroth.github.io/BDAEcology/lmer.html#restricted-maximum-likelihood-estimation-reml
)
summary (mod0Ra)
summ(mod0Ra)
# Ra/W
df$Ra_W <- df$Ra / df$W
# Ra / square root of W
df$Ra_sqW <- df$Ra / sqrt(W)
# Ra / square root of W
df$Ra_sqW <- df$Ra / sqrt(df$W)
# Ra / log W
df$Ra_lnW <- df$Ra / ln(df$W)
# Ra / log W
df$Ra_logW <- df$Ra / log(df$W)
# Ra / square root of day-of-year
df$RA_sqDOY <- df$Ra / sqrt(df$day)
month(7)
# Ra / square root of day-since-Jul1
lubridate::yday(month(7), day(1))
# Ra / square root of day-since-Jul1
lubridate::yday(as.Date("2008-07-01"))
# Take a look at the timespan
summary(df$date)
load(file = "daily_weather_2008-2019.Rdata")
daily <- daily %>%
# Calculate derived metrics for each day
mutate(DiurnialRange = Tmax - Tmin,
MeanTemp = (Tmin + Tmax) / 2,
# Get only positive mean temperatures (for Growing degree units calculation)
PositiveMeanTemp = ifelse(MeanTemp > 0, MeanTemp, 0)) %>%
# Adjust dates and add new variables for month and years
mutate(date = as.Date(date),
month = months(date),
year = format(date, format = "%Y")) %>%
# Filter only years of inventories
filter(year %in% c(2008, 2011, 2014, 2019))
# Must be calculated for each year separately.
# Data must contain one row per day and the variable with the positive daily mean temperature.
# If mean temperature is negative, put zero in this variable.
# Also the variable with the full date MUST be character AND named "date"
gdu <- function(daily_data_for_one_year,
var_with_PositiveMeanTemp) {
GDU <- list() # prepare empty list
# looping through the daily data within the year
for (i in 1:nrow(daily_data_for_one_year)) {
GDU[[i]] <- c(daily_data_for_one_year$date[i],
sum(daily_data_for_one_year[1:i, var_with_PositiveMeanTemp])
)
}
# reshape obtained list
GDU <- as.data.frame(GDU)
GDU <- as.data.frame(t(GDU))
colnames(GDU) <- c("date", "GDU")
# retrieve the result
return(GDU)
}
# List all required years
list_of_years <- c(2008, 2011, 2014, 2019)
# Create an empty list
gdu_by_years <- list()
for (k in 1:length(list_of_years)) {
# Calculate GDUs for each year
df_temp <- daily %>%
# loop doesn't seem to work with `date` format, convert to character
mutate(date = as.character(date)) %>%
filter(year == list_of_years[[k]]) %>%
select(place, date, PositiveMeanTemp) %>%
split(.$place)
# Create an empty list
df_gdu <- list()
# Loop through the list elements (data frames with all days for the particular year,
# split by place ID)
for (i in 1:length(df_temp)) {
df_gdu[[i]] <- gdu(df_temp[[i]], "PositiveMeanTemp")
df_gdu[[i]]$place <- df_temp[[i]]$place
}
# Transform list of data frames into a single data frame
gdu_by_years[[k]] <- bind_rows(df_gdu)
}
# Transform list of data frames into a single data frame
GDU <- bind_rows(gdu_by_years) %>%
mutate(date = as.Date(date))
# Add GDU as additional variable to the daily climate data for required years
daily <- daily %>%
left_join(GDU, by = c("date", "place"))
# Drop temporary variables not longer required
rm(df_temp, df_gdu, GDU, gdu_by_years, i, k)
daily %>%
mutate(day = lubridate::yday(date)) %>%
select(date, day) %>%
filter(month(date) == 3 & day(date) == 25) %>%
unique()
# Ra / square root of day-since-Jul1
# Which day-of-year is July, 1st
Jul_1st <- tibble(
year = c(2008, 2011, 2014, 2019),
Jul1_DOY = c(lubridate::yday(as.Date("2008-07-01")),
lubridate::yday(as.Date("2008-07-01")),
lubridate::yday(as.Date("2008-07-01")),
lubridate::yday(as.Date("2008-07-01"))
)
)
View(Jul_1st)
# Ra / square root of day-since-Jul1
# Which day-of-year is July, 1st
Jul_1st <- tibble(
year = c(2008, 2011, 2014, 2019),
Jul1_DOY = c(lubridate::yday(as.Date("2008-07-01")),
lubridate::yday(as.Date("2011-07-01")),
lubridate::yday(as.Date("2014-07-01")),
lubridate::yday(as.Date("2019-07-01"))
)
)
Jul_1st
if (df$Year == "2008") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
} else if (df$Year == "2011") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[2,2])
} else if (df$Year == "2014") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[3,2])
} else {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[4,2])
}
if (df$Year == "2008") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
} else if (df$Year == "2011") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[2,2])
} else if (df$Year == "2014") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[3,2])
} else if (df$Year == "2019") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[4,2])
}
df[df$Year == "2008"]
df[df$Year == 2008]
df[,df$Year == "2008"]
df[df$Year == "2008",]
Jul_1st[1,2]
if (df$Year == "2008") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
} else if (df$Year == "2011") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[2,2])
} else if (df$Year == "2014") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[3,2])
} else if (df$Year == "2019") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[4,2])
}
if (df$Year == "2008") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
}
if (df$Year == "2008") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
} else if (df$Year == "2011") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[2,2])
} else if (df$Year == "2014") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[3,2])
} else if (df$Year == "2019") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[4,2])
}
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
sqrt(df$day - Jul_1st[1,2])
sqrt(df$day - Jul_1st[1,2])
if (df$Year == "2008") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[1,2])
} else if (df$Year == "2011") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[2,2])
} else if (df$Year == "2014") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[3,2])
} else if (df$Year == "2019") {
df$RA_sqDsJ1 <- df$Ra / sqrt(df$day - Jul_1st[4,2])
}
df$Ra / sqrt(df$day - Jul_1st[4,2])
df$RA_sqDsJ1 <- if (df$Year == "2008") {
df$Ra / sqrt(df$day - Jul_1st[1,2])
} else if (df$Year == "2011") {
df$Ra / sqrt(df$day - Jul_1st[2,2])
} else if (df$Year == "2014") {
df$Ra / sqrt(df$day - Jul_1st[3,2])
} else if (df$Year == "2019") {
df$Ra / sqrt(df$day - Jul_1st[4,2])
}
class(df$Year)
levels(df$Year)
Jul_1st
for(i in 1: nrow(df)){
if(df$Year[i] == "2008"){
df$RA_sqDsJ1[i] <- df$Ra[i] / sqrt(df$day[i] - 183)
} else {
df$RA_sqDsJ1[i] <- df$Ra[i] / sqrt(df$day[i] - 182)
}
}
