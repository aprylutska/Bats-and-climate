filter(Species == "Nyctalus noctula" &
age == "sad") %>%
select(-Species, -age) %>%
# Make a new variable with places' unique identifiers
unite("place_id", Territory:Place, remove = FALSE) %>%
mutate(across(c(place_id, Territory, Place, sex, Year),
as.factor))
# Loaded packages with their versions
sessionInfo() # to check your locale
df <- df %>%
# count bats per day
count(date) %>%
# choose days where more than 10 bats
filter(n >= 1) %>%
# subset with days where more than 10 bats
inner_join(df, by = join_by(date)) %>%
filter(Territory != "Smolensk" &
Territory != "Bryansk") %>%
filter(Territory != "Chornobyl") %>%
# filter(Territory == "Homilsha") %>%
select(-n)
# Check how many bats we captured during the night
ggplot(df, aes(x = day, fill = Territory)) +
geom_histogram() +
labs(x = "Day of the year",
y = "Number of bats") +
facet_wrap(vars(Year))
ggplot(data = df, aes(Ra, W
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# geom_smooth(aes(fill = Year)) +
labs(x = "Forearm length, mm",
y = "Weight, g")
# Ra
shapiro.test(df$Ra)
ggplot(df, aes(x = Ra, colour = sex)) +
geom_density(aes(fill = sex), alpha = .5)
# Bartlett test of homogeneity of variances
bartlett.test(Ra ~ sex, df)
# If p > 0.05, accept Null Hypothesis (variance are homogeneous)
# Student's t-test. Test significance of differences in sepal.length between two iris species
Ra_t <- t.test(Ra ~ sex, df)
# p-value << 0.05 - reject Null Hypothesis
# Mann-Whitney (Wilcoxon) test
Ra_wilk <- wilcox.test(Ra ~ sex, data = df)
# W
shapiro.test(df$W)
ggplot(df, aes(x = W, colour = sex)) +
geom_density(aes(fill = sex), alpha = .5)
# Bartlett test of homogeneity of variances
bartlett.test(W ~ sex, df)
# If p > 0.05, accept Null Hypothesis (variance are homogeneous)
# Student's t-test. Test significance of differences in sepal.length between two iris species
W_t <- t.test(W ~ sex, df)
# p-value << 0.05 - reject Null Hypothesis
# Mann-Whitney (Wilcoxon) test
W_wilk <- wilcox.test(W ~ sex, data = df)
p1 <- ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Forearm length",
# # Wilcoxon rank sum test with continuity correction
# subtitle = paste0("W = ",  round(Ra_wilk$statistic, digits = 3),
#                   " p = ", round(Ra_wilk$p.value, digits = 3)),
# Welch Two Sample t-test
subtitle = paste0("t = ",  round(Ra_t$statistic, digits = 3),
" p = ", round(Ra_t$p.value, digits = 3)),
y = "Forearm length, mm")
p2 <- ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "Weight",
# # Wilcoxon rank sum test with continuity correction
# subtitle = paste0("W = ",  round(W_wilk$statistic, digits = 3),
#                   " p = ", round(W_wilk$p.value, digits = 3)),
# Welch Two Sample t-test
subtitle = paste0("t = ",  round(W_t$statistic, digits = 3),
" p = ", round(W_t$p.value, digits = 3)),
y = "Weight, g")
gridExtra::grid.arrange(p1, p2, nrow=1, ncol=2)
rm(Ra_t, Ra_wilk, W_t, W_wilk)
p1 <- ggplot(data = df, aes(x = Year, y = Ra)) +
geom_violin(aes(colour = sex)) +
geom_boxplot(aes(fill = sex, colour = sex), alpha = 0.3, outliers = F) +
geom_point(aes(colour = sex), alpha = 0.5) +
labs(title = "a) Forearm length",
y = "Forearm length, mm")
p2 <- ggplot(data = df, aes(x = Year, y = W)) +
geom_violin(aes(colour = sex)) +
geom_boxplot(aes(fill = sex, colour = sex), alpha = 0.3, outliers = F) +
geom_point(aes(colour = sex), alpha = 0.5) +
labs(title = "b) Weight",
y = "Weight, g")
gridExtra::grid.arrange(p1, p2, nrow=1, ncol=2)
rm(p1, p2)
# t ~ Ra
p_Ra_day_4years <- ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "Ra ~ DOY",
x = "Day of the year",
y = "Forearm length, mm")
# t ~ W
p_W_day_4years <- ggplot(data = df, aes(x = day, y = W, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "W ~ DOY",
x = "Day of the year",
y = "Weight, g")
gridExtra::grid.arrange(p_Ra_day_4years, p_W_day_4years, nrow=1, ncol=2)
rm(p_Ra_day_4years, p_W_day_4years)
# t ~ Ra
ggplot(data = df, aes(x = day, y = Ra, colour = sex)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = sex)) +
labs(title = "Ra ~ DOY",
x = "Day of the year",
y = "Forearm length, mm") +
facet_wrap(vars(Year), scales = "fixed")
# t ~ W
ggplot(data = df, aes(x = day, y = W, colour = sex)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = sex)) +
labs(title = "W ~ DOY",
x = "Day of the year",
y = "Weight, g") +
facet_wrap(vars(Year), scales = "fixed")
check_my_var(df, "Ra", "day", years = "Year")
check_my_var(df, "W", "day", "Year")
# Fit simple linear model (all years altogether)
mod <- lm(log(W) ~ log(day), data = df)
# Get residuals
df$BMI <- residuals(mod)
# Drop unused variables
rm(mod)
# # Fit simple linear models, but for each year separately, then merge the results
# # Prepare custom function for Body Mass Index calculation
# bmi_lm <- function(df){
#   lm(log(W) ~ log(day), data = df)
# }
#
# # Nest df by Year and fit separate linear models for each year
# df_nested <- df %>%
#   group_by(Year) %>%
#   nest() %>%
#   mutate(model = map(data, bmi_lm)) %>%
#   mutate(BMI = map(model, residuals))
#
# # Unnest data and merge original data with newly calculated residuals
# df_BMI <- df_nested %>%
#   unnest(BMI) %>%
#   select(-data, -model)
#
# df <- df_nested %>%
#   unnest(data) %>%
#   select(-model, -BMI) %>%
#   bind_cols(df_BMI) %>%
#   rename(Year = `Year...1`) %>%
#   select(-`Year...10`)
#
# rm(bmi_lm, df_nested, df_BMI)
check_my_var(df, "BMI", "day", "Year")
ggplot(data = df, aes(Year, BMI)) +
geom_violin(aes(colour = sex), alpha = 0.3) +
geom_boxplot(aes(fill = sex, colour = sex), alpha = 0.3, outliers = F) +
geom_point(aes(colour = sex), alpha = 0.5) +
labs(y = "Body Mass Index")
ggplot(data = df, aes(day, BMI, colour = Year)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(x = "Day of the year",
y = "Body Mass Index")
# Take a look at the timespan
summary(df$date)
load(file = "./data/daily_weather_2007-2019.Rdata")
daily <- daily %>%
mutate(date = as.Date(date))
df <- df %>%
rownames_to_column(var = "bat_id")
# Vignettes
# library(climwin)
#
# vignette("climwin", package = "climwin")
# vignette("advanced_climwin", package = "climwin")
# Load necessary libraries
library(climwin)
library(lme4)
# Set priors
cdate <- daily$date  # date var in climate data
bdate <- df$date     # date var in biological data
# Relative or absolute time response.
# If "absolute", reference day as day, month is needed
type <- "absolute"
refday <- c(01, 07)
# If "relative", time window calculated for each individual value
# type <- "relative"
# refday <- NULL
# Temporal resolution of climate data
# cinterval <- "day"
cinterval <- "week"
# Upper and lower limit for tested climate windows respectively
# Must correspond to the resolution chosen in ‘cinterval’
# if 'cinterval' set to "days"
# range <- c(250, 0)
# if 'cinterval' set to "week"
# range <- c(30, 0) # (~ 1 Dec)
range <- c(23, 0) # ~ 15 Jan
stat <- "mean"
func <- "lin"
# number of repeats for randomization
# repeats <- 5 # for metric = "C"
repeats <- 200 # for metric = "AIC"
# Metrics for assessing
# metric = "C"
metric = "AIC"
# Number of years in data
sample.size = nlevels(as.factor(as.vector(df$Year)))
# Set priors
# List of dependent variable candidates
xvar <- list(Tmean = daily$Tmean, Tmin = daily$Tmin)
# Null model with no climate signal
baseline <- lm(Ra ~ 1, data = df)
# Fit candidate model set
RaWin <- slidingwin(xvar = xvar,
cdate = daily$date,
bdate = df$date,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(RaWin, file = paste0(modeldir, "RaWin.Rdata"))
rm(RaWin)
gc()
# Fit randomized model set for evaluation purposes
RaRand <- randwin(repeats = repeats,
xvar = xvar,
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = range,
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
save(RaRand, file = paste0(modeldir, "RaRand.Rdata"))
rm(RaRand)
# gc()
load(file = paste0(modeldir, "RaWin.Rdata"))
# Possible combinations of model parameters
RaWin$combos
candidate_models <- list()
for (i in 1:(length(RaWin)-1)) {
candidate_models[[i]] <- head(RaWin[[i]]$Dataset)
}
candidate_models
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
knitr::opts_chunk$set(echo = TRUE)
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
load(file = paste0(modeldir, "RaRand.Rdata"))
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(RaWin)-1)) {
bestmod <- RaWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
load(file = paste0(modeldir, "RaRand.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "RaRand.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
# Plot all diagnostic plots for a given parameter combination
plotalls <- list()
for (i in 1:(length(RaWin)-1)) {
RaOutput <- RaWin[[i]]$Dataset
RaRand_data <- RaRand[[i]]
WindowOpen <- RaWin[[i]]$Dataset[1, 2]
WindowClose <- RaWin[[i]]$Dataset[1, 3]
# Fit single best model
RaSingle <- singlewin(xvar = xvar[i],
cdate = cdate,
bdate = bdate,
baseline = baseline,
cinterval = cinterval,
range = c(WindowOpen, WindowClose),
type = type, refday = refday,
stat = stat,
func = func,
spatial = list(df$place_id, daily$place_id))
png(paste0(figuredir, "climwin_Ra_", RaWin$combos$climate[i], ".png"), width = 32 , height = 22,
units = "cm", res = 300)
plotall(dataset = RaOutput,
datasetrand = RaRand_data,
bestmodel = RaSingle$BestModel,
bestmodeldata = RaSingle$BestModelData)
dev.off()
}
# Null model with no climate signal
baseline <- lm(W ~ 1, data = df)
load(file = paste0(modeldir, "WWin.Rdata"))
# Possible combinations of model parameters
WWin$combos
candidate_models <- list()
for (i in 1:(length(WWin)-1)) {
candidate_models[[i]] <- head(WWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "BMIWin.Rdata"))
# Possible combinations of model parameters
BMIWin$combos
candidate_models <- list()
for (i in 1:(length(BMIWin)-1)) {
candidate_models[[i]] <- head(BMIWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "BMIRand.Rdata"))
randomized_models <- list()
for (i in 1:(length(BMIRand)-1)) {
randomized_models[[i]] <- head(BMIRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(BMIWin)-1)) {
bestmod <- BMIWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "BMIRand.Rdata"))
pvalues <- list()
for (i in 1:(length(BMIRand)-1)) {
pvalues[[i]] <- pvalue(dataset = BMIWin[[i]]$Dataset,
datasetrand = BMIRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
load(file = paste0(modeldir, "RaWin_Prcp.Rdata"))
# Possible combinations of model parameters
RaWin$combos
candidate_models <- list()
for (i in 1:(length(RaWin)-1)) {
candidate_models[[i]] <- head(RaWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "RaRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(RaRand)-1)) {
randomized_models[[i]] <- head(RaRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(RaWin)-1)) {
bestmod <- RaWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "RaRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(RaRand)-1)) {
pvalues[[i]] <- pvalue(dataset = RaWin[[i]]$Dataset,
datasetrand = RaRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
load(file = paste0(modeldir, "WWin_Prcp.Rdata"))
# Possible combinations of model parameters
WWin$combos
candidate_models <- list()
for (i in 1:(length(WWin)-1)) {
candidate_models[[i]] <- head(WWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "WRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(WRand)-1)) {
randomized_models[[i]] <- head(WRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(WWin)-1)) {
bestmod <- WWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "WRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(WRand)-1)) {
pvalues[[i]] <- pvalue(dataset = WWin[[i]]$Dataset,
datasetrand = WRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
load(file = paste0(modeldir, "BMIWin_Prcp.Rdata"))
# Possible combinations of model parameters
BMIWin$combos
candidate_models <- list()
for (i in 1:(length(BMIWin)-1)) {
candidate_models[[i]] <- head(BMIWin[[i]]$Dataset)
}
candidate_models
load(file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
randomized_models <- list()
for (i in 1:(length(BMIRand)-1)) {
randomized_models[[i]] <- head(BMIRand[[i]])
}
randomized_models
# Plot residuals against fitted values to check dependency function
# (linear, quadratic, cubic, etc.)
p_res_fit <- list()
for (i in 1:(length(BMIWin)-1)) {
bestmod <- BMIWin[[i]]$BestModel
# Create residuals vs fitted plot
p_res_fit[[i]] <- ggplot(bestmod, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = 2) +
geom_smooth() +
labs(title = "Residuals vs. Fitted Plot for the best model candidate",
x = "Fitted Values",
y = "Residuals")
}
for (i in 1:length(p_res_fit)) {
plot(p_res_fit[[i]])
}
# Estimate how likely our observed result would be at random
# load(file = paste0(modeldir, "BMIRand_Prcp.Rdata"))
pvalues <- list()
for (i in 1:(length(BMIRand)-1)) {
pvalues[[i]] <- pvalue(dataset = BMIWin[[i]]$Dataset,
datasetrand = BMIRand[[i]],
metric = metric,
sample.size = sample.size)
print(pvalues[[i]])
}
