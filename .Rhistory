# Fit simple linear model
mod <- lm(log(W) ~ log(day), data = df)
# Get residuals
df$BCI <- residuals(mod)
# Drop unused variables
rm(mod)
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
for (k in 1:nrow(yearly_stat)) {
yearly_stat$sign_level[k] <- if(yearly_stat$p_value[k] > 0.05) {" "} else {"*"}
}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
mytheme
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
check_my_var(df, "BCI", "day")
ggplot(data = df, aes(Year, BCI)) +
geom_violin() +
labs(title = "BCI") +
mytheme
ggplot(data = df, aes(day, BCI
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(day, BCI
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
check_my_var(df, "W_Ra", "day")
ggplot(data = df, aes(day, BCI
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
rm(list = ls()) # reset R's brain
library(lubridate)
library(ggplot2)
library(tidyverse) # for data manipulations
library(easyclimate) # for daily climate data extraction
library(sf) # for spatial operations
# library(patchwork)
library(jtools)
# Set custom theme for ggplot2 plots
mytheme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# if LC_TIME=uk_UA.UTF-8, your months will be in Ukrainian.
# To fix that, you need to re-map locate into US (will be back after restart R session)
# Set locale to get English months names
# Sys.setlocale("LC_TIME", "en_US.UTF-8") # for Linux
# Sys.setlocale("LC_TIME", "English") # for Windows
# Read data and prepare it for further analyses
df <- read.csv("Homolsha_all_years.csv") # read data from *.csv file
# Set variables classes
df$date <- as.Date(df$Data, "%d.%m.%Y") # convert date to R Data format
df$Place <- as.factor(df$Place)
df$Species <- as.factor(df$Species)
df$sex <- as.factor(df$sex)
df$age <- as.factor(df$age)
df$Year <- year(df$date) #виокремлення року
df$Year <-as.factor (df$Year)
#створення нової колонки з даними про день від початку року
df$day <- yday(df$date)
df$Ra <- sub(",", ".", df$Ra) #заміна ком на крапки в промірах передпліччя
df$W <- sub(",", ".", df$W)
df$Ra <-as.numeric (df$Ra) #присвоєння промірам нумеричного типу даних
df$W <-as.numeric (df$W)
# Delete unused variables
df$Data <- NULL
df$reproductive.status <- NULL
# Drop rows with NAs in W and Ra
df <- df[!is.na(df$W) & !is.na(df$Ra),]
# Loaded packages with their versions
sessionInfo() # to check your locale
summary(df)
table (df$Species,df$age)
# Subset only some species (e.g., N.noc. , M.daubentonii)
df <- subset(df,
Species %in% c('Nyctalus noctula'
#,'Myotis daubentonii'
) &
age == "sad"
)
summary (df)
df <- df |>
# count bats per day
count(date) |>
# choose days where more than 10 bats
filter(n > 10) |>
# subset with days where more than 10 bats
inner_join(df)
ggplot(data = df, aes(Ra, W
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Ra") +
mytheme
ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "W") +
mytheme
ggplot(data = df, aes(Year, Ra)) +
geom_violin() +
labs(title = "Ra") +
mytheme
ggplot(data = df, aes(Year, W)) +
geom_violin() +
labs(title = "W") +
mytheme
# t ~ Ra
p_Ra_day_4years <- ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
ggtitle("Ra ~ DOY") +
mytheme
# t ~ W
p_W_day_4years <- ggplot(data = df, aes(x = day, y = W, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
ggtitle("W ~ DOY") +
mytheme
p_Ra_day_4years
p_W_day_4years
rm(p_Ra_day_4years, p_W_day_4years)
ggplot(df, aes(day)) +
geom_histogram() +
facet_wrap(vars(Year))
# Fit simple linear model
mod <- lm(log(W) ~ log(day), data = df)
# Get residuals
df$BCI <- residuals(mod)
# Drop unused variables
rm(mod)
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
for (k in 1:nrow(yearly_stat)) {
yearly_stat$sign_level[k] <- if(yearly_stat$p_value[k] > 0.05) {" "} else {"*"}
}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
mytheme
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
check_my_var(df, "BCI", "day")
ggplot(data = df, aes(Year, BCI)) +
geom_violin() +
labs(title = "BCI") +
mytheme
ggplot(data = df, aes(day, BCI
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
rm(list = ls()) # reset R's brain
library(lubridate)
library(ggplot2)
library(tidyverse) # for data manipulations
library(easyclimate) # for daily climate data extraction
library(sf) # for spatial operations
# library(patchwork)
library(jtools)
# Set custom theme for ggplot2 plots
mytheme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# if LC_TIME=uk_UA.UTF-8, your months will be in Ukrainian.
# To fix that, you need to re-map locate into US (will be back after restart R session)
# Set locale to get English months names
# Sys.setlocale("LC_TIME", "en_US.UTF-8") # for Linux
# Sys.setlocale("LC_TIME", "English") # for Windows
# Read data and prepare it for further analyses
df <- read.csv("Homolsha_all_years.csv") # read data from *.csv file
# Set variables classes
df$date <- as.Date(df$Data, "%d.%m.%Y") # convert date to R Data format
df$Place <- as.factor(df$Place)
df$Species <- as.factor(df$Species)
df$sex <- as.factor(df$sex)
df$age <- as.factor(df$age)
df$Year <- year(df$date) #виокремлення року
df$Year <-as.factor (df$Year)
#створення нової колонки з даними про день від початку року
df$day <- yday(df$date)
df$Ra <- sub(",", ".", df$Ra) #заміна ком на крапки в промірах передпліччя
df$W <- sub(",", ".", df$W)
df$Ra <-as.numeric (df$Ra) #присвоєння промірам нумеричного типу даних
df$W <-as.numeric (df$W)
# Delete unused variables
df$Data <- NULL
df$reproductive.status <- NULL
# Drop rows with NAs in W and Ra
df <- df[!is.na(df$W) & !is.na(df$Ra),]
# Loaded packages with their versions
sessionInfo() # to check your locale
summary(df)
table (df$Species,df$age)
# Subset only some species (e.g., N.noc. , M.daubentonii)
df <- subset(df,
Species %in% c('Nyctalus noctula'
#,'Myotis daubentonii'
) &
age == "sad"
)
summary (df)
df <- df |>
# count bats per day
count(date) |>
# choose days where more than 10 bats
filter(n > 10) |>
# subset with days where more than 10 bats
inner_join(df)
ggplot(data = df, aes(Ra, W
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Ra") +
mytheme
ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "W") +
mytheme
ggplot(data = df, aes(Year, Ra)) +
geom_violin() +
labs(title = "Ra") +
mytheme
ggplot(data = df, aes(Year, W)) +
geom_violin() +
labs(title = "W") +
mytheme
# t ~ Ra
p_Ra_day_4years <- ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
ggtitle("Ra ~ DOY") +
mytheme
# t ~ W
p_W_day_4years <- ggplot(data = df, aes(x = day, y = W, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
ggtitle("W ~ DOY") +
mytheme
p_Ra_day_4years
p_W_day_4years
rm(p_Ra_day_4years, p_W_day_4years)
ggplot(df, aes(day)) +
geom_histogram() +
facet_wrap(vars(Year))
# Fit simple linear model
mod <- lm(log(W) ~ log(day), data = df)
# Get residuals
df$BCI <- residuals(mod)
# Drop unused variables
rm(mod)
check_my_var <- function(data, dependent_var, independent_var) {
formula <- formula(paste0(dependent_var, " ~ ", independent_var))
years <- list("2008", "2011", "2014", "2019")
yearly_stat <- list()
for (i in 1:length(years)) {
# Fit simple linear model
mod <- lm(formula = formula, data = data[data$Year == years[i],])
# Get response coefficient
coef <- mod$coefficients[2]
# Get p-value from model summary
p_val <- summary(mod)$coefficients[,"Pr(>|t|)"][2]
yearly_stat[[i]] <- c(coef, p_val)
}
yearly_stat <- as.data.frame(t(as.data.frame(yearly_stat)))
rownames(yearly_stat) <- years
colnames(yearly_stat) <- c("Coefficient", "p_value")
# yearly_stat$sign_level <- ifelse(yearly_stat$p-value > 0.05,
#                                  " ",
#                                  ifelse(yearly_stat$p-value <= 0.05 & yearly_stat$p-value > 0.01,
#                                         "*",
#                                         "***")
#                                  )
for (k in 1:nrow(yearly_stat)) {
yearly_stat$sign_level[k] <- if(yearly_stat$p_value[k] > 0.05) {" "} else {"*"}
}
p <- ggplot(data = data, aes_string(x = independent_var, y = dependent_var)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(vars(Year)) +
mytheme
return(list(yearly_stat, p))
}
check_my_var(df, "Ra", "day")
check_my_var(df, "W", "day")
check_my_var(df, "BCI", "day")
ggplot(data = df, aes(Year, BCI)) +
geom_violin() +
labs(title = "BCI") +
mytheme
ggplot(data = df, aes(day, BCI
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Ra, mm") +
mytheme
ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "W, g") +
mytheme
ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Forearm length",
y = "Ra, mm") +
mytheme
ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "Weigth",
y = "W, g") +
mytheme
ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Forearm length",
y = "Ra, mm") +
mytheme
ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "Weight",
y = "W, g") +
mytheme
ggplot(data = df, aes(Year, Ra)) +
geom_violin() +
labs(title = "Forearm length",
y = "Ra, mm") +
mytheme
ggplot(data = df, aes(Year, W)) +
geom_violin() +
labs(title = "Weight",
y = "W, g") +
mytheme
# t ~ Ra
p_Ra_day_4years <- ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "Ra ~ DOY",
y = "Forearm length, mm")
mytheme
# t ~ W
p_W_day_4years <- ggplot(data = df, aes(x = day, y = W, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "W ~ DOY",
y = "Weight, g") +
mytheme
p_Ra_day_4years
p_W_day_4years
rm(p_Ra_day_4years, p_W_day_4years)
ggplot(data = df, aes(Ra, W
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(x = "Forearm length, mm",
y = "Weight, g")
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(Ra, W
, colour = Year
)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(x = "Forearm length, mm",
y = "Weight, g") +
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(sex, Ra)) +
geom_violin() +
labs(title = "Forearm length",
y = "Forearm length, mm") +
mytheme
ggplot(data = df, aes(sex, W)) +
geom_violin() +
labs(title = "Weight",
y = "Weight, g") +
mytheme
ggplot(df, aes(day)) +
geom_histogram() +
facet_wrap(vars(Year))
ggplot(df, aes(day)) +
geom_histogram() +
facet_wrap(vars(Year)) +
mytheme
ggplot(df, aes(day)) +
geom_histogram() +
labs(x = "Day of the year") +
facet_wrap(vars(Year)) +
mytheme
ggplot(df, aes(day)) +
geom_histogram() +
labs(x = "Day of the year",
y = "Number of bats") +
facet_wrap(vars(Year)) +
mytheme
ggplot(data = df, aes(day, BCI, colour = Year)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(x = "Day of the year",
y = "Body Condition Index")
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(day, BCI, colour = Year)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(x = "Day of the year",
y = "Body Condition Index") +
# facet_wrap(vars(sex)) +
mytheme
ggplot(data = df, aes(Year, BCI)) +
geom_violin() +
labs(y = "Body Condition Index") +
mytheme
# t ~ Ra
p_Ra_day_4years <- ggplot(data = df, aes(x = day, y = Ra, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "Ra ~ DOY",
y = "Forearm length, mm") +
mytheme
# t ~ W
p_W_day_4years <- ggplot(data = df, aes(x = day, y = W, colour = Year)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = Year)) +
labs(title = "W ~ DOY",
y = "Weight, g") +
mytheme
p_Ra_day_4years
p_W_day_4years
rm(p_Ra_day_4years, p_W_day_4years)
